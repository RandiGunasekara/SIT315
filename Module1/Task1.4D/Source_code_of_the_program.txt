#include <avr/io.h>
#include <avr/interrupt.h>

//Defining the pins for LED and the temperature sensor pin
const int ledPin = 13;
const int tempPin = A0; 

//setting a threshold value for the temperature 
const float tempThreshold = 25.0; 

//setting the led state as false 
volatile bool ledState = false;

void setup() {
  //set the LED pin as an output
  pinMode(ledPin, OUTPUT);
  //set the temperature pin as an input
  pinMode(tempPin, INPUT);
  
  Serial.begin(9600);

  //setting the PCINT for pins 2 and 3
  PCICR |= (1 << PCIE2); //Enabling PCINT2
  PCMSK2 |= (1 << PCINT18) | (1 << PCINT19); //Enabling PCINT on pins 2 and 3

  // Timer setup for every second
  noInterrupts();           // Disable interrupts
  TCCR1A = 0;               
  TCCR1B = 0;               
  TCNT1  = 0;               
  OCR1A = 15624;            
  TCCR1B |= (1 << WGM12);   
  TCCR1B |= (1 << CS12) | (1 << CS10);  
  TIMSK1 |= (1 << OCIE1A);  
  interrupts();             // Enable interrupts
}

//ISR function that will trigger for any change in pin 2 and 3
ISR(PCINT2_vect) { 
  //Turn the LED ON if any motion detected 
  digitalWrite(ledPin, HIGH);
  Serial.println("Motion detected, LED ON!");
}

//Timer interrupt to read temperature values
ISR(TIMER1_COMPA_vect) {
  readTemperature();
}

void loop() {
  // no any recurruing events 
}

void readTemperature() {
  int sensorValue = analogRead(tempPin);
  float voltage = sensorValue * (5.0 / 1023.0);
  float temperatureC = (voltage - 0.5) * 100.0;
  Serial.print("Temperature: ");
  Serial.print(temperatureC);
  Serial.println(" C");

  //Checking if the temperature is more than the threshold value, if so tuen ON LED
  if (temperatureC > tempThreshold) {
    digitalWrite(ledPin, HIGH);
    Serial.println("Temperature exceeds threshold, LED On!");
  } else {
    digitalWrite(ledPin, LOW);
    Serial.println("Temperature below threshold, LED Off!");
  }
}
